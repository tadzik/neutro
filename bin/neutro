#!/usr/bin/env perl6
use v6;
use File::Mkdir;
use File::Copy;
use Module::Build;
use Module::Test;
use Module::Install;

# Yay globals!
my $home       = ($*VM<config><osname> eq 'MSWin32')
                 ?? %*ENV<HOMEPATH> !! %*ENV<HOME>;
my $CONFIGDIR  = "$home/.neutro";
my $DESTDIR    = %*ENV<DESTDIR> ne "" ?? %*ENV<DESTDIR>
                                      !! "$home/.perl6";
my $INSTALLED  = "$CONFIGDIR/installed";
my $SRCDIR     = "$CONFIGDIR/src";
my $STRICT     = False;
my $NOTEST     = False;
my $VERBOSE    = False;
my %modules;

#
# Execute a block of code in a given directory
#
sub indir (Str $where, Callable $what) {
    my $old = cwd;
    mkdir $where, :p;
    chdir $where;
    $what();
    chdir $old;
}

#
# Ensure the modules list is present
#
sub checklist {
    unless $CONFIGDIR.IO ~~ :d {
        mkdir $CONFIGDIR, :p;
    }
    unless "$CONFIGDIR/projects.list".IO ~~ :f {
        updatedb;
    }
    unless $INSTALLED.IO ~~ :f {
        open($INSTALLED, :w).close;
    }
    my $fh = open "$CONFIGDIR/projects.list";
    for $fh.lines -> $line {
        next if $line ~~ /^\#/;
        my ($name, $url) = $line.split: ' ';
        %modules{$name} = $url;
    }
    $fh.close;
}

#
# Terminate a program yelling
#
sub crap (Str $msg) {
    notice $msg;
    exit 1;
}

#
# Download/update the given module
#
sub fetch (Str $name, Str $url) {
    my $res;
    indir $SRCDIR, {
        notice "Fetching $name";
        if "$SRCDIR/$name".IO ~~ :d {
            indir $name, {
                $res = run 'git pull -q';
                crap "Failed updating the $name repo" if $res;
            };
        } else {
            $res = run "git clone -q $url $name";
            crap "Failed cloning the $name repo" if $res;
        }
    };
}

#
# Install the specified module
#
sub install (Str $module) {
    my $res;
    my $path;
    if %modules.exists($module) {
        fetch $module, %modules{$module};
    }
    $path = modulepath($module)
            or crap "Unknown module or path '$module'";

    installdeps $module;

    notice "Building $module";
    my $fail = False;
    try {
        Module::Build::build :dir($path), :v($VERBOSE);
        CATCH {
            $fail = True;
        }
    }
    crap "Building $module failed" if $fail;

    unless $NOTEST {
        if $STRICT and "$path/t".IO !~~ :d {
            crap "No tests for $module";
        }
        notice "Testing $module";
        try {
            Module::Test::test :dir($path), :v($VERBOSE);
            CATCH {
                $fail = True;
            }
        }
        crap "Tests failed for $module" if $fail;
    }

    notice "Installing $module";
    try {
        Module::Install::install :dir($path), :dest($DESTDIR),
                                 :v($VERBOSE);
        CATCH {
            $fail = True;
        }
    }
    crap "Installing $module failed" if $fail;

    notice "Successfully installed $module";

    unless isinstalled $module {
        given open($INSTALLED, :a) {
            .say($module);
            .close;
        }
    }
}

#
# Install the dependencies of a module
#
sub installdeps (Str $module) {
    indir modulepath($module), {
        if 'deps.proto'.IO ~~ :f {
            my $fh = open 'deps.proto';
            for $fh.lines -> $dep {
                next if $dep ~~ /^\#/;
                next if $dep eq '';
                unless isinstalled $dep {
                    notice "$module depends on $dep, installing";
                    install $dep;
                }
            }
            $fh.close;
        }
    };
}

#
# Check if a module is installed
#
sub isinstalled (Str $module) {
    my $isit;
    given open($INSTALLED) {
        $isit = .lines.first($module).Bool;
        .close;
    }
    return $isit;
}

#
# Print a list of available modules
#
sub listmodules {
    for %modules.keys.sort.grep({ $_ }) { .say }
}

#
# Get a path of a module's files
#
sub modulepath(Str $mod) {
    return %modules.exists($mod) ?? "$SRCDIR/$mod"
                                 !! $mod.IO ~~ :d ?? $mod !! Nil;
}

#
# Print a message the fancy way
#
sub notice (Str $what) {
    say "==> $what";
}

#
# Update the modules database
#
sub updatedb {
    notice 'Updating modules database';
    indir $CONFIGDIR, {
        unlink 'projects.list' if 'projects.list'.IO ~~ :e;
        fetch 'ecosystem', 'git://github.com/perl6/ecosystem.git';
        cp "$SRCDIR/ecosystem/projects.list", "$CONFIGDIR/projects.list";
    };
}

multi MAIN ('list') {
    checklist;
    listmodules;
}

multi MAIN ('update') {
    updatedb;
}

multi MAIN (*@modules where { +@modules },
            Bool :$strict = False,
            Bool :$v      = False,
            Bool :$notest = False) {
    checklist;
    $STRICT  = $strict;
    $VERBOSE = $v;
    $NOTEST  = $notest;
    @modulesÂ».&install;
}

# vim: ft=perl6
